import Head from 'next/head'
import { GetServerSidePropsContext } from 'next'

import AreaGraph from '@/components/dashboard/AreaGraph'
import BudgetInfo from '@/components/dashboard/BudgetInfo'
import Balances from '@/components/dashboard/Balances'
import Subscriptions from '@/components/dashboard/Subscriptions'
import BasicLayout from '@/components/layouts/BasicLayout'

import nookies from 'nookies'
import {verifyIDToken} from '../config/firebaseadmin'

import { doc, getDoc } from 'firebase/firestore'
import { db } from '@/config/firebase'
import { client } from '@/config/plaid'
import { Account, Subscription, Transaction } from '@/utils/data_types'
import { getAuth, signOut } from 'firebase/auth'

export default function Home({accounts, budgets, subList, spending}: {accounts: Account[], budgets: Object, subList: Subscription[], spending:any}) {
  return (
    <>
      <Head>
        <title>Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <BasicLayout>
        <h1 className="mb-4 p-2">Dashboard</h1>

        <div className="h-fit flex flex-col gap-1 rounded-md bg-secondary-dark/[50%] shadow-md p-2">
          <AreaGraph spending={spending}/>
        </div>

        <BudgetInfo budgets={budgets}/>

        <div className="flex flex-col gap-2 h-max rounded-md bg-secondary-dark/[50%] shadow-md p-2">
          <h2 className="bg-primary-dark py-2 px-4 rounded-md shadow-label w-fit text-extra-light">
            Balances
          </h2>
          <Balances accounts={accounts}/>
        </div>

        <div className="flex flex-col gap-2 h-max rounded-md bg-secondary-dark/[50%] shadow-md p-2">
          <h2 className="bg-primary-dark py-2 px-4 rounded-md shadow-label w-fit text-extra-light">
            Subscriptions
          </h2>
          <Subscriptions subscriptions={subList}/>
        </div>
      </BasicLayout>
    </>
  )
}

export const getServerSideProps = async (ctx: GetServerSidePropsContext) => {
  try {
    const cookies = nookies.get(ctx)
    const token = await verifyIDToken(cookies.token)
    let accountsList: Account[] | [{}] = []
    let subList:Subscription[] | [{}] = [] 
    let accountIDs:string[] = []
    let spending:Transaction[] | [{}] = []
    let budgetsList: {} | null = null

    if (token) {
      try {
        const linkref = doc(db, `users/${token.uid}/linkBankAcc`, 'linkBankAccInfo')
        const linkSnap = await getDoc(linkref)

        if (!linkSnap.exists())
          return {
              redirect: {destination: '/link-bank-account'}
          }
        else {
          // Get Accounts' balances ===================================================================================
          const access_token = linkSnap.data().accessToken
          const response = await client.accountsBalanceGet({
            access_token
          });
          const accounts = response.data.accounts;
          const omitAcc = ['savings', 'cd']
          
          accounts.forEach((acc:any) => {
            accountsList.push(acc)
            if (!omitAcc.includes(acc.subType))
              accountIDs.push(acc.account_id)
          })
          // ==========================================================================================================

          // Get user's budgets =======================================================================================
          const budgetRef = doc(db, `users/${token.uid}/budgets`, 'budgetList')
          const budgetSnap = await getDoc(budgetRef)
    
          if (budgetSnap.exists()) {
            budgetsList = budgetSnap.data()
          }
          // ==========================================================================================================

          // Get Monthly Current Spending =============================================================================
          const todayDate: Date = new Date()
          const firstMonthDate = new Date(todayDate.getFullYear(), todayDate.getMonth(), 1).toISOString().slice(0, 10)
          const monthlyTranscations = await client.transactionsGet({
            access_token,
            start_date: firstMonthDate,
            end_date: todayDate.toISOString().slice(0, 10)
          });
          let transactions = monthlyTranscations.data.transactions

          while(transactions.length < monthlyTranscations.data.total_transactions) {
            const remainingTransactions = await client.transactionsGet({
              access_token,
              start_date: firstMonthDate,
              end_date: todayDate.toISOString().slice(0, 10),
              options: {
                offset: transactions.length,
              }
            });
            transactions = transactions.concat(remainingTransactions.data.transactions)
          }
          
          const omitCategories = ['Transfer', 'Credit Card', 'Deposit', 'Payment', 'Service']
          transactions.reverse().forEach((transactionItem) => {
            if (!omitCategories.some((r) => transactionItem.category!.indexOf(r) >= 0) && 
                !omitCategories.some((r) => transactionItem.name.indexOf(r) >= 0)) {
              spending.push({
                name: transactionItem.merchant_name || 'N/A',
                amount: Math.abs(transactionItem.amount),
                date: transactionItem.date
              })
            }
          })
          // ==========================================================================================================
          
          // Get Subscriptions ========================================================================================
          const recurringTransactions = await client.transactionsRecurringGet({
            access_token,
            account_ids: accountIDs
          });

          let outflowStreams = recurringTransactions.data.outflow_streams;
          const tmpDate:Date = new Date()
          outflowStreams.forEach((transaction) => {
            const lastTransactionMonth: number = new Date(transaction.last_date).getMonth()
            const prevMonth:number = new Date(tmpDate.setMonth(tmpDate.getMonth() - 1)).getMonth()
            const transactionCount = transaction.transaction_ids.length

            if (transaction.category.includes('Subscription') 
                && (prevMonth === lastTransactionMonth || (transactionCount === 1 || todayDate.getMonth() === lastTransactionMonth)))
              subList.push({
                name: transaction.merchant_name!,
                firstDate: transaction.first_date,
                amount: transaction.average_amount.amount!,
                id: transaction.stream_id
              })
            
          })
          // ==========================================================================================================
        }

      } catch(err) {
        console.log('Dashboard: ', err)
      }
    }
     
    return {
      props: {
        accounts: accountsList,
        budgets: budgetsList,
        subList,
        spending
      }
   }

  } catch (err:any) {
    console.log(err)
    return {
      redirect: {destination: '/login'}
    }
  }
}