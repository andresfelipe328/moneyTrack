import Head from 'next/head'

import BasicLayout from '@/components/layouts/BasicLayout'
import FeeCalendar from '@/components/transactions/FeeCalendar'
import TransactionItem from '@/components/transactions/TransactionItem'

import nookies from 'nookies'
import { verifyIDToken } from '@/config/firebaseadmin'
import { GetServerSidePropsContext } from 'next'
import { doc, getDoc } from 'firebase/firestore'
import { db } from '@/config/firebase'
import { client } from '@/config/plaid'
import { Account } from '@/utils/data_types'

export default function Transactions() {
  return (
    <>
      <Head>
        <title>Transactions</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <BasicLayout>
         <h1>Transactions</h1>
         <div className="flex justify-center w-full p-2 bg-primary-dark z-30">
            <FeeCalendar/>
         </div>

         <div className="flex flex-col gap-2 h-max rounded-md bg-secondary-dark/[50%] shadow-md p-2">
            <h2 className="bg-primary-dark py-2 px-4 rounded-md shadow-label w-fit text-extra-light">Upcoming Charges</h2>
            <ul className="w-full flex flex-col gap-4">
               <TransactionItem/>
               <TransactionItem/>
               <TransactionItem/>

               <button className="group btn bg-extra-light flex items-center justify-center w-[40%] mx-auto shadow-btn-shadow">
                  <p className="text-secondary-dark group-hover:text-extra-light transition-all duration-300 ease-in-out">more</p>
               </button>
            </ul>  
         </div>

         <div className="flex flex-col gap-2 h-max rounded-md bg-secondary-dark/[50%] shadow-md p-2">
            <h2 className="bg-primary-dark py-2 px-4 rounded-md shadow-label w-fit text-extra-light">Upcoming Charges</h2>
            <ul className="w-full flex flex-col gap-4">
               <TransactionItem/>
               <TransactionItem/>
               <TransactionItem/>

               <button className="group btn bg-extra-light flex items-center justify-center w-[40%] mx-auto shadow-btn-shadow">
                  <p className="text-secondary-dark group-hover:text-extra-light transition-all duration-300 ease-in-out">more</p>
               </button>
            </ul>  
         </div>
      </BasicLayout>
    </>
  )
}

export const getServerSideProps = async (ctx: GetServerSidePropsContext) => {
   try {
      const cookies = nookies.get(ctx)
      const token = await verifyIDToken(cookies.token)
      const linkref = doc(db, `users/${token.uid}/linkBankAcc`, 'linkBankAccInfo')
      const linkSnap = await getDoc(linkref)
      let accountIDs:string[] = []

      if (!linkSnap.exists())
         return {
            redirect: {destination: '/link-bank-account'}
         }
      else {
         const access_token = linkSnap.data().accessToken
         const response = await client.accountsBalanceGet({
         access_token
         });
         const accounts = response.data.accounts;
         const omitAcc = ['savings', 'cd']

         accounts.forEach((acc:any) => {
         if (!omitAcc.includes(acc.subType))
            accountIDs.push(acc.account_id)
         })
         const recurringTransactions = await client.transactionsRecurringGet({
            access_token,
            account_ids: accountIDs
         });

         let outflowStreams = recurringTransactions.data.outflow_streams;
         console.log(outflowStreams)
         let charges:Object[] = []
         outflowStreams.forEach((transaction) => {
            charges.push({
               name: transaction.merchant_name!,
               amount: transaction.average_amount.amount!,
               id: transaction.stream_id
            })
         })
      }
      
      return {
       props: {}
    }
 
   } catch(err) {
       return {
         redirect: {destination: '/login'}
       }
   }
}