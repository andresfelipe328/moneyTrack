import Head from 'next/head'
import {useState} from 'react'
import BasicLayout from '@/components/layouts/BasicLayout'
import FeeCalendar from '@/components/bills_transactions/FeeCalendar'
import nookies from 'nookies'
import { verifyIDToken } from '@/config/firebaseadmin'
import { GetServerSidePropsContext } from 'next'
import { doc, getDoc } from 'firebase/firestore'
import { db } from '@/config/firebase'
import { client } from '@/config/plaid'
import { Bill } from '@/utils/data_types'
import Bills from '@/components/bills_transactions/Bills'
import { Transaction } from 'plaid'
import ItemPaginate from '@/components/bills_transactions/ItemPaginate'
import { ThreeCircles } from 'react-loader-spinner'

type Props = {
   bills: Bill[],
   transactions: Transaction[],
   totalTransactions: number,
   userID: string
}

export default function Transactions({bills, transactions, totalTransactions, userID}: Props) {
   const todayDate = new Date()
   const [date, setDate] = useState(new Date().toISOString().slice(0,7))
   const [monthBills, setMonthBills] = useState<Bill[]>(bills)
   const [monthTransactions, setMonthTransactions] = useState<Transaction[]>(transactions)
   const [totalMTransactions, setTotalMTransactions] = useState<number>(totalTransactions)
   const [loading, setLoading] = useState(false)

   const fetchMonthData = async (e:any) => {
      setLoading(true)
      setDate(e.target.value)
      const dateItems = e.target.value.split('-')
      const newDate = new Date(Number(dateItems[0]), Number(dateItems[1]) - 1)
      const firstDate = new Date(newDate.getFullYear(), newDate.getMonth(), 1).toISOString().slice(0, 10)
      const lastDate = Number(dateItems[1]) - 1 === todayDate.getMonth() 
         ?
            todayDate.toISOString().slice(0, 10)
         :
            new Date(newDate.getFullYear(), newDate.getMonth() + 1, 0).toISOString().slice(0, 10)

      const response = await fetch('/api/bills_transactions', {
         method: 'POST',
         headers: {
           'Content-Type': 'application/json',
         },
         body: JSON.stringify({ userID, firstDate, lastDate}),
      });
      response.json().then((data) => {
         setLoading(false)
         setMonthBills(data.bills)
         setMonthTransactions(data.transactions)
         setTotalMTransactions(data.totalTransactions)
      })
   }

   return (
   <>
      <Head>
        <title>Bills & Transactions</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <BasicLayout>
         <div className="w-full p-2 bg-primary-dark">
            <h1>Bill Calendar</h1>
            <FeeCalendar bills={monthBills}/>
         </div>
         
         <div className='flex items-center gap-2'>
            <h1>Bills & Transactions</h1>
            <input 
               type="month" 
               value={date} 
               max={todayDate.toISOString().slice(0,7)} 
               onChange={fetchMonthData}
            />
         </div>
         { !loading
            ?
               <>
                  <Bills bills={bills}/>
                  <ItemPaginate transactions={monthTransactions} totalTransactions={totalMTransactions}/>
               </>
            :
            <div className='grid place-items-center h-full '>
               <ThreeCircles
                  height="80"
                  width="80"
                  outerCircleColor="#F5CB5C"
                  innerCircleColor="#5b827a"
                  middleCircleColor="#c25451"
                  ariaLabel="tail-spin-loading"
               />
            </div>
         }
      </BasicLayout>
    </>
  )
}

export const getServerSideProps = async (ctx: GetServerSidePropsContext) => {
   try {
      const cookies = nookies.get(ctx)
      const token = await verifyIDToken(cookies.token)
      const linkref = doc(db, `users/${token.uid}/linkBankAcc`, 'linkBankAccInfo')
      const linkSnap = await getDoc(linkref)
      const todayDate:Date = new Date()
      let accountIDs:string[] = []
      let bills:Bill[] = []
      let transactions:Transaction[] = []
      let totalTransactions: number = 0

      if (!linkSnap.exists())
         return {
            redirect: {destination: '/link-bank-account'}
         }
      else {
         const access_token = linkSnap.data().accessToken
         const response = await client.accountsBalanceGet({
         access_token
         });
         const accounts = response.data.accounts;
         const omitAcc = ['credit', 'loan']

         accounts.forEach((acc:any) => {
         if (!omitAcc.includes(acc.type)) {
            accountIDs.push(acc.account_id)
         }
         })

         // Get Automated Bills =======================================================================================
         const recurringTransactions = await client.transactionsRecurringGet({
            access_token,
            account_ids: accountIDs
         });

         let outflowStreams = recurringTransactions.data.outflow_streams;
         const billCategories = ['Service', 'Rent', 'Healthcare Services']
         outflowStreams.forEach((transaction) => {
            if (!bills.find((bill:Bill) => bill.name === transaction.merchant_name)) {
               if (billCategories.some((r) => transaction.category!.indexOf(r) >= 0)) {
                  bills.push({
                     name: transaction.merchant_name!,
                     chargeDate: transaction.last_date.replace('-', ' '),
                     amount: transaction.last_amount.amount!,
                     id: transaction.stream_id,
                     recurring: transaction.description.includes('RECURRING') ? true : false
                  })
               }
               else if (transaction.description.includes('RECURRING')) {
                  const year = todayDate.getFullYear()
                  const month = todayDate.getMonth()
                  const day = Number(transaction.description.split(' ')[1].slice(2))
                  const date = new Date(year, month, day).toISOString().slice(0,10).replace('-', ' ')
                  bills.push({
                     name: transaction.merchant_name!,
                     chargeDate: date,
                     amount: transaction.average_amount.amount!,
                     id: transaction.stream_id,
                     recurring: transaction.description.includes('RECURRING') ? true : false
                  })
               }
            }
         })
         // ===========================================================================================================

         // Get Monthly Current Transactions ==========================================================================
         const firstMonthDate = new Date(todayDate.getFullYear(), todayDate.getMonth(), 1).toISOString().slice(0, 10)
         const monthlyTranscations = await client.transactionsGet({
           access_token,
           start_date: firstMonthDate,
           end_date: todayDate.toISOString().slice(0, 10),
         //   options: {
         //    count: 10
         //   }
         });
         totalTransactions = monthlyTranscations.data.total_transactions
         transactions = monthlyTranscations.data.transactions

         while(transactions.length < monthlyTranscations.data.total_transactions) {
           const remainingTransactions = await client.transactionsGet({
             access_token,
             start_date: firstMonthDate,
             end_date: todayDate.toISOString().slice(0, 10),
             options: {
               offset: transactions.length,
             }
           });
           transactions = transactions.concat(remainingTransactions.data.transactions)
         }
      }
      return {
       props: {
         userID: token.uid,
         bills,
         transactions,
         totalTransactions
      }
    }
 
   } catch(err:any) {
      console.log(err)
      return {
         redirect: {destination: '/login'}
      }
   }
}